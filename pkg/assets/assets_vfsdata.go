// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets contains project assets.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 21, 21, 34, 13, 681776521, time.UTC),
		},
		"/environments": &vfsgen۰DirInfo{
			name:    "environments",
			modTime: time.Date(2020, 6, 21, 23, 14, 27, 733164052, time.UTC),
		},
		"/environments/bucharest.json": &vfsgen۰CompressedFileInfo{
			name:             "bucharest.json",
			modTime:          time.Date(2020, 6, 27, 17, 25, 34, 974810531, time.UTC),
			uncompressedSize: 2458,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcd\xb2\xa3\x20\x10\x85\xf7\xf7\x29\x28\xd7\x59\x88\xf1\xff\x65\x52\x1d\x65\x62\x4f\x29\x4c\x01\x66\x31\x53\x79\xf7\x29\x49\x14\x33\x32\x5c\xc8\x26\x55\xa1\x41\xbe\x73\x9a\xee\xfe\xf3\x45\x08\x21\x89\xd2\x20\xf5\x85\x8b\x9e\x25\x2d\x49\x40\x42\x9f\x9c\x9e\x91\x9b\x80\x71\x0b\x5c\xe7\x6e\x00\xc9\x94\x5e\xa3\x8c\xdf\x51\x0a\x3e\x31\xae\x2f\x1c\x26\xf7\x26\xa5\x41\x33\x95\xb4\xe4\x79\x99\x59\x33\x57\xec\x57\xcc\xea\xc0\x66\x89\x4a\x63\x97\xb4\xe4\x5c\x96\xa7\xf7\x68\x37\xe0\xd8\x4b\xc6\x0f\xe7\x4c\xf4\x37\x93\xc8\x97\x6f\x56\xc5\xe9\x18\xd5\x38\xa1\x12\x20\x21\x69\x09\xa5\xb5\x63\x87\xc2\x2b\xce\x4b\x34\x4f\xdf\x82\x8f\xed\xdf\xc3\x9e\xda\x89\xf4\x8a\x48\xa3\x24\xfc\x42\xcd\x94\xc6\x05\x22\xa5\x0e\xc4\x1f\x70\x03\x09\x8b\x93\x19\xa5\x01\x90\x9b\x25\x3e\x9b\xab\x3c\x8a\x51\x48\xe8\xd9\xe2\x62\xe5\x22\x7c\xa5\xb5\x2a\x02\xe8\xf6\x29\xf1\x01\x66\x4d\x14\xe0\x0b\xc1\x9d\xe4\x71\xbe\x89\x9f\x26\x4a\x97\xff\x01\x94\xeb\x09\x0f\x61\x96\xc7\x59\x38\xb1\x01\x7a\x34\x1e\xa6\xdf\x3e\x55\x1a\x44\x69\x3f\xe9\xe5\xa4\x51\x9c\xab\x74\x27\x65\x2f\xc5\x95\x69\x08\x4d\xb6\xdd\xee\x05\xcc\x3e\x35\xd2\x55\xf3\x9d\x04\x14\x77\x63\x63\x16\x52\xd3\x76\xbf\x87\x91\x96\x71\x35\x6d\x85\xd3\xcc\xe5\xa3\xc4\x89\x63\x37\x93\x3b\x8e\x9d\xa9\x2b\x9a\x97\x8e\x6d\xbb\xd6\x70\xae\x03\xb4\xac\xdd\xcc\xe7\x76\x71\xfe\xa8\xb0\x72\x97\x8c\xad\x2d\xd0\xc2\xdf\xb9\x9a\x26\xc4\x84\x3a\x24\x5f\xdb\x9d\xbe\xee\x51\xc7\xa5\xcb\x4e\x11\x97\x8c\x6d\x46\x14\x34\xac\x7b\x1c\x84\xf9\x5e\x56\x13\x97\x8f\x15\xe6\x5f\x85\xe4\xfd\xbd\x34\x95\xbf\x34\xf2\x32\x48\x89\xcd\xa0\x4f\x42\x15\x37\xb3\x57\x09\xce\x47\xb1\x1f\xb1\x19\x0d\x34\xdc\xea\xf6\x61\xa6\x71\x8f\xe2\x90\x45\xa7\xa7\x7b\x5e\xf7\xfc\xde\xb9\xfe\xff\x22\xfe\x7a\xfe\x3e\xfe\x06\x00\x00\xff\xff\x2a\x4b\x08\xa5\x9a\x09\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/environments"].(os.FileInfo),
	}
	fs["/environments"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/environments/bucharest.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
