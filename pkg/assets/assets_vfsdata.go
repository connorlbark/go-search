// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets contains project assets.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 21, 21, 34, 13, 681776521, time.UTC),
		},
		"/environments": &vfsgen۰DirInfo{
			name:    "environments",
			modTime: time.Date(2020, 6, 21, 23, 14, 27, 733164052, time.UTC),
		},
		"/environments/bucharest.json": &vfsgen۰CompressedFileInfo{
			name:             "bucharest.json",
			modTime:          time.Date(2020, 6, 27, 17, 11, 52, 911200014, time.UTC),
			uncompressedSize: 2428,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcb\xb2\xa3\x20\x10\x86\xf7\xe7\x29\x28\xd7\x59\xd8\xc6\x4b\xcc\xcb\x9c\xea\x28\x93\xf4\x94\xc2\x14\x60\x16\x33\x95\x77\x9f\x92\x1c\xc5\x8c\x0c\x07\xb2\x49\x55\x68\x90\xef\xff\xfb\xc2\x9f\x0f\xc6\x18\xcb\xb4\x41\x65\x3e\x85\xec\x79\x76\x66\x19\x2a\xec\xb3\xc3\x33\x72\x95\x38\xac\x81\xcb\xd4\xdd\x50\x71\x6d\x96\x28\x17\x77\x52\x52\x8c\x5c\x98\x4f\x81\xa3\x7f\x93\x36\x68\xb8\xce\xce\xec\x79\x99\x5d\xb3\x57\x6c\x57\xec\xea\x8d\x4f\x8a\xb4\xa1\x2e\x3b\xb3\x63\x5d\x1f\x5e\xa3\xdd\x8d\x86\x5e\x71\xb1\x3b\x67\xa3\xbf\xb9\x22\x31\x7f\xb3\xa9\x0e\xfb\xa8\xa1\x91\xb4\x44\x85\xd9\x99\x01\x9c\x5e\x36\x3c\xd6\x7f\x0f\x77\x72\x23\x23\x88\x99\x27\x41\xfe\x22\xc3\xb5\xa1\x19\x22\x07\x0f\xe6\x0f\xbc\xa2\xc2\xd9\xab\x02\x20\x02\x72\x15\x1d\x32\xb2\x29\x93\x18\xa5\xc2\x9e\xcf\x3e\x35\x3e\xc2\xaf\xc4\x35\x55\x04\xdd\xd6\xf4\x10\x60\xd1\x26\x01\x7e\x21\x00\x9c\x3c\x7c\xc3\x74\x95\x3f\x6d\x14\xe6\xff\x11\x94\xcb\x89\x00\x61\x51\xa6\x59\x38\xf2\x1b\xf6\x64\x3d\xcc\xbf\x2d\x46\x88\xa2\x74\x9f\x0c\x72\x42\x12\xe7\x22\xdd\x4b\xd9\x2b\x79\xe1\x06\x63\x93\xed\xb6\x07\x01\x8b\x77\x8d\xf4\x75\x75\xa7\x90\xe4\xdd\xda\x58\xe4\x11\x8c\x6e\x7f\x80\x11\xea\xb4\x9e\x76\xc2\xa1\xf0\xf9\xa8\x68\x14\xd4\x4d\xec\x4e\x43\x67\xfb\x0a\xca\xda\xb3\x6d\x33\x1a\x8e\x31\xf3\x49\xd3\x85\xa6\x6f\xdc\xae\x8e\x6f\x35\x56\xe9\x93\xb1\x8e\x05\xa8\xc2\x93\xab\x6d\x63\x4c\x38\xc5\xe4\x6b\xbd\x33\x34\x3d\x4e\x69\xe9\x72\xef\x84\x4f\xc6\xe2\x2a\x54\x10\x37\x3d\x76\xc2\x42\x95\xd5\xa6\xe5\x63\x81\xf9\x57\x21\x7b\xad\x97\xb6\x09\xb7\x46\x59\x47\x29\x71\x19\x0c\x49\x68\xd2\x5e\xe5\x45\x82\xb7\x28\xb6\x4f\x6c\x01\x91\x86\x3b\xdd\x21\xcc\x3c\xad\x28\x76\x59\xf4\x7a\xba\xe5\xf5\xbf\xdf\x1b\xd7\xff\xdf\xc4\x1f\xcf\xdf\xc7\xdf\x00\x00\x00\xff\xff\x49\x97\x44\x93\x7c\x09\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/environments"].(os.FileInfo),
	}
	fs["/environments"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/environments/bucharest.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
