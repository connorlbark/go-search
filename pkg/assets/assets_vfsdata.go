// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets contains project assets.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 21, 21, 34, 13, 681776521, time.UTC),
		},
		"/environments": &vfsgen۰DirInfo{
			name:    "environments",
			modTime: time.Date(2020, 6, 28, 13, 0, 41, 256660962, time.UTC),
		},
		"/environments/bucharest.json": &vfsgen۰CompressedFileInfo{
			name:             "bucharest.json",
			modTime:          time.Date(2020, 6, 27, 18, 33, 17, 64209977, time.UTC),
			uncompressedSize: 2479,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xdf\xae\xa3\x20\x10\xc6\xef\xcf\x53\x10\xaf\x7b\x21\xd6\xff\x2f\x73\x32\x55\xb6\xce\x46\xe1\x04\xb0\xc9\xee\xa6\xef\xbe\x91\x56\xb1\x2b\xcb\x81\xde\x34\x29\x03\xf2\xfb\xbe\x61\x66\xfe\x7c\x10\x42\x48\xa2\x7f\x7d\xb1\xa4\x25\x89\xd2\xa0\x59\x72\x7a\x2c\x2a\x0d\x52\x7f\x72\xd1\x9b\x10\x48\xe8\xd7\xc8\x55\xc0\xb8\x05\x2e\x73\x37\x80\x64\x4a\xaf\x51\xc6\x6f\x28\x05\x9f\x18\xd7\x9f\x1c\x26\xf7\x26\x73\x93\x4a\x5a\xf2\x20\x30\x6b\xe6\x8a\xfd\x8a\x59\x1d\xd8\x2c\x51\x69\xec\x92\x96\x9c\xcb\xf2\xf4\x1a\xed\x06\x1c\x7b\xc9\xf8\xe1\x9c\x89\xfe\x66\x12\xf9\xf2\xcd\xaa\x38\x1d\xa3\x1a\x27\x54\x02\x24\x24\x2d\xa1\xb4\x76\xec\x50\x78\xc1\x79\x89\xe6\xe9\x4b\xf0\xbe\xfd\xbb\xdb\x53\x3b\x91\x5e\x11\x69\x94\x84\x2f\xd4\x4c\x69\x5c\x20\x52\xea\x40\xfc\x01\x57\x90\xb0\x38\x99\x51\x1a\x00\xb9\x59\xe2\xb3\xb9\xca\xa3\x18\x85\x84\x9e\x2d\x2e\x56\x2e\xc2\x67\x5a\xab\x22\x80\x6e\x9f\x12\x1f\x60\xd6\x44\x01\x3e\x11\xdc\x49\x1e\xe7\xab\xf8\x69\xa2\x74\xf9\x1f\x40\xb9\x9e\xf0\x10\x66\x79\x9c\x85\x13\x1b\xa0\x47\xe3\x61\xfa\xed\x53\xa5\x41\x94\xf6\x93\x5e\x4e\x1a\xc5\xb9\x4a\x77\x52\xf6\x52\x5c\x98\x86\xd0\x64\xdb\xed\x5e\xc0\xec\x5d\x23\x5d\x35\xdf\x49\x40\x71\x33\x36\x66\x21\x35\x6d\xf7\x7b\x18\x69\x19\x57\xd3\x56\x38\xcd\x5c\x3e\x4a\x9c\x38\x76\x33\xb9\xe1\xd8\x99\xba\xa2\x79\xe9\xd8\xb6\x6b\x0d\xe7\x3a\x40\xcb\xda\xcd\x7c\x6e\x17\xe7\xb7\x0a\x2b\x77\xc9\xd8\xda\x02\x2d\xfc\x9d\xab\x69\x42\x4c\xa8\x43\xf2\xb5\xdd\xe9\xeb\x1e\x75\x5c\xba\xec\x14\x71\xc9\xd8\x66\x44\x41\xc3\xba\xc7\x41\x98\xef\x65\x35\x71\xf9\x58\x61\xfe\x55\x48\x5e\xdf\x4b\x53\xf9\x4b\x23\x2f\x83\x94\xd8\x0c\xfa\x24\x54\x71\x33\x7b\x95\xe0\x7c\x14\xfb\x11\x9b\xd1\x40\xc3\xad\x6e\x1f\x66\x1a\xf7\x28\x0e\x59\x74\x7a\xba\xe7\x75\xcf\xef\x9d\xeb\xff\x2f\xe2\x8f\xc7\xef\xfd\x6f\x00\x00\x00\xff\xff\x81\x43\xfc\x2c\xaf\x09\x00\x00"),
		},
		"/environments/corners.json": &vfsgen۰CompressedFileInfo{
			name:             "corners.json",
			modTime:          time.Date(2020, 6, 28, 13, 8, 55, 408051971, time.UTC),
			uncompressedSize: 490,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x2a\xa9\x2c\x48\x55\xb2\x52\x50\x4a\x2f\xca\x4c\x51\xd2\x81\x88\x81\xd8\xf1\x79\x89\xb9\x60\x89\xe4\xfc\xa2\xbc\xd4\xa2\x62\x64\x39\x25\x2b\x85\x68\x30\x0f\x2c\xa2\xa5\x87\x0f\x40\xf5\x81\x55\xe2\x55\x38\xaa\x92\xba\x2a\x15\x95\xc0\x0a\x63\xb9\x6a\x01\x01\x00\x00\xff\xff\x30\x26\x82\xb8\xea\x01\x00\x00"),
		},
		"/environments/maze.json": &vfsgen۰CompressedFileInfo{
			name:             "maze.json",
			modTime:          time.Date(2020, 6, 28, 13, 9, 3, 764737065, time.UTC),
			uncompressedSize: 487,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x51\x0a\xc2\x40\x0c\x44\xff\x7b\x8a\x98\x4f\x91\x39\x40\xaf\x22\x22\x05\x8b\xf8\x51\x11\xf1\x63\x54\xbc\xbb\x34\xd9\x2c\x71\xd7\xd0\x96\xed\xe4\xed\xec\x64\xdf\x83\x88\x88\x3e\x9e\xb7\x59\x47\xd1\xf3\xfd\x72\xd2\x9d\x6b\xeb\xfa\x78\x9d\x16\x6b\x2c\xd3\x6b\xce\x0d\x1d\x65\x6f\x7f\xa6\x6c\x01\x10\xa5\x98\x6b\x15\xca\x3e\x23\xe1\x12\xe9\x4f\x65\x60\xc2\x2f\x89\x0c\xfb\xeb\xc7\xb4\xa4\xb7\xe1\x9f\xc8\xe0\x41\xfe\x9e\x8e\x8a\xb3\xda\x13\x6c\x3c\x91\xd2\x21\x56\xbd\x27\x23\x28\x03\xaa\xfb\xba\x9c\xa8\x53\x14\xa4\x98\xb6\x64\x62\xe2\x8e\x58\xe2\x76\x64\x5b\x31\x20\xc0\x8d\x1a\x78\x18\x3e\xdf\x00\x00\x00\xff\xff\x56\xf1\xf8\x05\xe7\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/environments"].(os.FileInfo),
	}
	fs["/environments"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/environments/bucharest.json"].(os.FileInfo),
		fs["/environments/corners.json"].(os.FileInfo),
		fs["/environments/maze.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
